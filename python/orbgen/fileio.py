'''
Writes an ABACUS orbital file header to a file object.

A typical header looks like

<<<<<<< starts here (taken from C_gga_8au_100Ry_2s2p1d.orb)
---------------------------------------------------------------------------
Element                     C
Energy Cutoff(Ry)          100
Radius Cutoff(a.u.)         8
Lmax                        2
Number of Sorbital-->       2
Number of Porbital-->       2
Number of Dorbital-->       1
---------------------------------------------------------------------------
SUMMARY  END

Mesh                        801
dr                          0.01
>>>>>>> ends here

Parameters
----------
    f : file object
        Must be opened in advance.
    elem : str
        Element symbol.
    ecut : int or float
        Energy cutoff. (To be studied...)
    rcut : int or float
        Cutoff radius.
    nzeta : list of int
        Number of orbitals for each angular momentum.
    lmax : int
        Maximum angular momentum.
    dr : float
        Grid spacing.

'''
def write_header(f, elem, ecut, rcut, nzeta, lmax, dr):

    assert(len(nzeta) == lmax+1)
    nr = int(rcut/dr) + 1
    symbol = ['S', 'P', 'D', 'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'O', 'Q', 'R', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z']

    f.write('---------------------------------------------------------------------------\n')
    f.write('Element                     {0}\n'.format(elem))
    f.write('Energy Cutoff(Ry)           {0}\n'.format(ecut))
    f.write('Radius Cutoff(a.u.)         {0}\n'.format(rcut))
    f.write('Lmax                        {0}\n'.format(lmax))

    for l in range(lmax+1):
        f.write("Number of {0}orbital-->       {1}\n".format(symbol[l], nzeta[l]))

    f.write('---------------------------------------------------------------------------\n')
    f.write('SUMMARY  END\n\n')
    f.write('Mesh                        {0}\n'.format(nr))
    f.write('dr                          {0}\n'.format(dr))


'''
Writes a numerical radial function to a file object.

Parameters
----------
    f : file object
        Must be opened in advance.
    l : int
        Angular momentum.
    izeta : int
        Zeta number.

'''
def write_chi(f, l, izeta, chi):
    f.write('                Type                   L                   N\n')
    f.write('                   0                   {0}                   {1}\n'.format(l, izeta))
    for ir, chi_of_r in enumerate(chi):
        f.write('{: 21.12e}'.format(chi_of_r))
        if ir % 4 == 3 and ir != len(chi)-1:
            f.write('\n')
    f.write('\n')


'''
Generates a numerical atomic orbital file in the ABACUS orbital file format.

Parameters
----------
    fname : str
        Name of the orbital file to be generated.
    elem : str
        Element symbol.
    rcut : float
        Cutoff radius of the orbital.
    chi : list of list of list of float
        Radial functions of the orbital.
    dr : float
        Grid spacing.

'''
def write_orbfile(fname, elem, rcut, chi, dr=0.01):
    lmax = len(chi)-1
    nzeta = [len(chi[l]) for l in range(lmax+1)]
    
    with open(fname, 'w') as f:
        write_header(f, elem, 100, rcut, nzeta, lmax, dr)
        for l in range(lmax+1):
            for izeta in range(nzeta[l]):
                write_chi(f, l, izeta, chi[l][izeta])



'''
Reads coefficients generated by SIAB into a nested list.
'''
def read_coeff(fname): 
    import re
    from itertools import accumulate

    with open(fname, 'r') as f:
        data = list(filter(None, re.split('\t| |\n', f.read())))

    delim = [i for i, x in enumerate(data) if x == 'Type' or x == '</Coefficient>']
    ll = [int(data[delim[i]+4]) for i in range(len(delim)-1)]
    lmax = max(ll)
    nzeta = [ll.count(l) for l in range(lmax+1)]
    
    nzeta_cumu = [0] + list(accumulate(nzeta))
    iorb = lambda l, izeta : nzeta_cumu[l] + izeta
    return [[ list(map(float, data[delim[iorb(l,izeta)]+6:delim[iorb(l,izeta)+1]])) \
            for izeta in range(nzeta[l])] for l in range(lmax+1)]


############################################################
#                       Testing
############################################################
def test_read_coeff():
    print('Testing read_coeff...')

    coeff = read_coeff('./testfiles/ORBITAL_RESULTS.txt')
    lmax = len(coeff)-1
    nzeta = [len(coeff[l]) for l in range(lmax+1)]
    nq = [len(coeff[l][izeta]) for l in range(lmax+1) for izeta in range(nzeta[l])]

    assert lmax == 3
    assert nzeta == [2, 2, 2, 1]
    assert nq == [31] * 7
    assert coeff[0][0][0] == 0.09780237320580
    assert coeff[0][0][30] == 0.00021711814077
    assert coeff[1][1][0] == -0.78111126700600
    assert coeff[3][0][30] == -0.09444436877182

    print('...Passed!')


def test_write_orbfile():
    from spherical_jn_root import ikebe

    print('Testing write_orbfile...')

    rcut = 3.14
    chi = [[[0,0,0,1,2],[2,3,4,5]], [[6,7,8]], [], [[9,10]]]

    write_orbfile('./testfiles/Unknown.orb', 'Unknown', rcut, chi)

    # TODO should have a read_orbfile function to read file back and do further check

    print('...Passed!')


if __name__ == '__main__':
    test_read_coeff()
    test_write_orbfile()

