import numpy as np
from scipy.special import spherical_jn
from jlzeros import ikebe
from scipy.integrate import simpson

from listmanip import *

print(ikebe(3, 50)/10)

exit()
a = np.zeros((5,3))
b = np.ones(3)
print(a)

exit()

def find_pattern(x):
    result = []
    count = 0
    for i, xi in enumerate(x):
        if isinstance(xi, list):
            if count > 0:
                result.append(count)
                count = 0
            result.append(find_pattern(xi))
        else:
            count += 1
            if i == len(x) - 1:
                result.append(count)

    return result

x = [1, 2, 3, 4, 5]
pattern = [1, [2, [2]]]

y = nest(x, pattern)
print(y)

p = find_pattern(y)
print(p)
print(p == pattern)

print(find_pattern([2]))


exit()


# copy-paste from ORBITAL_RESULTS
# zeta-orbital converted to zero-based numbering
coeff_00 = [  1.779751686832773e-01,    2.979796589536937e-01,    1.672904353321064e-01,   -6.945057842216009e-03, 
          -8.587117730096835e-02,   -8.710879109427952e-02,   -4.933531429121281e-02,   -2.179790904308548e-02,
          -2.222302301088333e-03,   -8.117792564396149e-04,    2.020225408293668e-03,   -2.058804719646541e-03,
           1.480935509618364e-03,   -2.562123646639122e-04,    1.274288580234426e-03,   -1.805252479760396e-04,
           6.908017161820665e-04,   -1.753130960749151e-03,    1.421585622963420e-03,   -8.549613520347820e-04,
           9.900403764878561e-04,   -1.356849200798185e-03,
         ]
coeff_01 = [ 4.853199245386081e-02,   -4.068091126819599e-01,   -3.442525144245247e-01,    1.768508347755637e-02, 
          1.206717246830374e-01,    3.957668042069254e-02,    1.723550091676488e-02,   -1.824241502866353e-03,
          5.552296894012897e-03,   -3.314933882919252e-03,   -1.243259558954572e-03,   -5.494550184027981e-06,
          1.863528044714140e-03,   -1.486229704246075e-03,   -5.145984351627728e-04,   -1.499398570922678e-03,
         -2.342351885113848e-04,   -9.755087125691663e-04,    2.803199040792151e-06,    9.455658575915874e-04,
          1.174610535199742e-03,   -1.531299056523588e-04,
         ]

coeff_10 = [ 2.562672078494698e-01,    3.543093041536275e-01,    2.677561092518411e-01,    1.068365613478155e-01, 
          2.612308740073788e-02,   -3.535138846121581e-02,   -1.696532577262391e-02,   -2.634964519741591e-02,
          5.243064959695151e-03,   -1.064592595672510e-02,    1.192282591626056e-02,   -1.026831857807405e-02,
          1.076762426846741e-02,   -1.161962311219741e-02,    9.818821155150377e-03,   -1.045252154393766e-02,
          1.107568163602119e-02,   -9.880526946343105e-03,    1.163804125013548e-02,   -1.141437897565247e-02,
          1.323794534611942e-02,   -2.418972024893548e-02,
         ]

coeff_11 = [ -2.621922501478577e-01,    2.647110366641760e-01,    3.884233705121924e-01,    1.778211840627898e-01, 
          -5.086647195005574e-02,   -1.782350222462229e-02,   -3.971066332364054e-02,    2.512552253951538e-02,
          -3.060230334150052e-02,    1.072262213899228e-02,   -9.535081734912082e-03,    1.095005877842074e-02,
          -9.929555944708504e-03,    8.744407323206032e-03,   -4.541439798731857e-03,    1.032695344633472e-02,
          -7.564864710179455e-03,    5.721363521165513e-03,   -4.540797787010755e-03,    4.963241295979121e-03,
          -4.129811859792487e-03,    5.454458307033074e-03,
         ]

coeff_00 = [
      -0.19414520868565, 
      -0.26369962670726,
      -0.10574264837312,
       0.04553983793922,
       0.11137962684798,
       0.11543810398002,
       0.08999517582481,
       0.05919470171726,
       0.03097046976366,
       0.01260679370233,
       0.00153525100043,
      -0.00110396449634,
      -0.00223175380126,
       0.00030051591851,
      -0.00001930830949,
       0.00218498918544,
       0.00026246049180,
       0.00189084118950,
      -0.00088512724745,
       0.00148102208076,
      -0.00181544953128,
       0.00283375955580,
        ]
coeff_01 = [
       0.66230920632552, 
      -0.60759666687064,
      -0.63522890629377,
       0.39453522326903,
       0.81847859995839,
       0.77975856718802,
       0.54915725305108,
       0.39173469419194,
       0.20290059076324,
       0.07323602228401,
       0.00643940050641,
      -0.01474708265122,
      -0.00163555577854,
      -0.00738239197292,
       0.01275838456373,
      -0.00342236760993,
       0.02266812366834,
      -0.00762645853828,
       0.02119910414638,
      -0.02106327527484,
       0.02479929919225,
      -0.04502253659495,
       ]

def normalize(f, r):
    C = simpson((r * f)**2, x=r)
    f *= 1./ np.sqrt(C)

coeff = coeff_00
l = 0

rcut = 7.0
nr = 701
dr = 0.01
r = dr * np.arange(nr)

sigma = 0.1
g = 1.0 - np.exp(-0.5 * ((r-rcut)/sigma)**2)

q = ikebe(l, len(coeff)) / rcut
#print('q = ', q)

f_00 = np.zeros(nr)
for iq in range(len(coeff_00)):
    f_00 += coeff_00[iq] * spherical_jn(l, q[iq] * r)

f_00 *= g
normalize(f_00, r)

f_01 = np.zeros(nr)
for iq in range(len(coeff_01)):
    f_01 += coeff_01[iq] * spherical_jn(l, q[iq] * r)
f_01 *= g
normalize(f_01, r)

# orthogonalize
ip = simpson(f_00 * f_01 * r * r, x=r)
f_01 -= ip * f_00
normalize(f_01, r)

for row in range(3):
    print('% 20.12e   % 20.12e   % 20.12e   % 20.12e'%(f_00[row*4], f_00[row*4+1], f_00[row*4+2], f_00[row*4+3]))

for row in range(3):
    print('% 20.12e   % 20.12e   % 20.12e   % 20.12e'%(f_01[row*4], f_01[row*4+1], f_01[row*4+2], f_01[row*4+3]))

